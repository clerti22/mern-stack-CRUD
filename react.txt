import React from 'react';
import UserForm from './User Form';
import './App.css';

const App = () => {
  return (
    <div class="container-fluid">
      <h1 class="text-center txtH1">CRUD MERN STACK</h1>
      <UserForm />
    </div>
  );
};

export default App;


------------------------------
User Form js

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const UserForm = () => {
  const [firstName, setFirstName] = useState('');
  const [middleName, setMiddleName] = useState('');
  const [lastName, setLastName] = useState('');
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [course, setCourse] = useState('');
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchUsers = async () => {
      setLoading(true);
      try {
        const response = await axios.get('http://localhost:5000/users');
        setUsers(response.data);
      } catch (error) {
        setError('Error fetching users');
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const handleSubmit = async (event) => {
    event.preventDefault();
    const user = { firstName, middleName, lastName, age, gender, course };
    setLoading(true);
    try {
      const response = await axios.post('http://localhost:5000/users', user);
      setUsers([...users, response.data]);
      resetForm();
    } catch (error) {
      setError('Error creating user');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (user) => {
    setSelectedUser(user);
    setFirstName(user.firstName);
    setMiddleName(user.middleName);
    setLastName(user.lastName);
    setAge(user.age);
    setGender(user.gender);
    setCourse(user.course);
  };
  
  const handleUpdate = async (event) => {
    event.preventDefault();
  
    const updatedUser = { firstName, middleName, lastName, age, gender, course };
  
    setLoading(true);
    try {
      const response = await axios.put(
        `http://localhost:5000/users/${selectedUser._id}`,
        updatedUser
      );
  
      const updatedUsersList = users.map((user) =>
        user._id === selectedUser._id ? response.data : user
      );
  
      setUsers(updatedUsersList);
      resetForm();
    } catch (error) {
      setError('Error updating user');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
  

  const handleDelete = async (id) => {
    setLoading(true);
    try {
      await axios.delete(`http://localhost:5000/users/${id}`); // Corrected URL
      setUsers(users.filter((user) => user._id !== id));
    } catch (error) {
      setError('Error deleting user');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setSelectedUser(null);
    setFirstName('');
    setMiddleName('');
    setLastName('');
    setAge('');
    setGender('');
    setCourse('');
  };

  return (
    <div >
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={selectedUser ? handleUpdate : handleSubmit}>
        <div class="container-fluid">

          <div class="row">
            <div class="col-4">
              <input type="text"
                placeholder="First Name"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
                required class="form-control" aria-label="Text input with segmented dropdown button" />
            </div>
            <div class="col-4">
              <input
                type="text"
                class="form-control"
                placeholder="Middle Name"
                value={middleName}
                onChange={(e) => setMiddleName(e.target.value)}
              />


            </div>

            <div class="col-4">
              <input
                type="text"
                class="form-control"
                placeholder="Last Name"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
                required
              />
            </div>

          </div>
          <div class="row">
            <div class="col-4">
              <input
                type="text"
                placeholder="Age"
                class="form-control"
                value={age}
                onChange={(e) => setAge(e.target.value)}
                required
              />
            </div>

            <div class="col-4 gen">
              <span>Gender:</span>
              <div class="gender">
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="radioDefault"
                    id="radioDefault1"
                    value="Male"
                    checked={gender === 'Male'}
                    onChange={(e) => setGender(e.target.value)}
                  />
                  <label className="form-check-label" htmlFor="radioDefault1">
                    Male
                  </label>
                </div>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="radioDefault"
                    id="radioDefault2"
                    value="Female"
                    checked={gender === 'Female'}
                    onChange={(e) => setGender(e.target.value)}
                  />
                  <label className="form-check-label" htmlFor="radioDefault2">
                    Female
                  </label>
                </div>

              </div>

            </div>
            <div class="col">
              <select
                className="form-select"
                aria-label="Default select example"
                value={course}
                onChange={(e) => setCourse(e.target.value)}
              >
                <option value="">--Please Select Course--</option>
                <option value="BSIT">BSIT</option>
                <option value="BSCS">BSCS</option>
                <option value="BSIS">BSIS</option>
                <option value="BLIS">BLIS</option>
              </select>

            </div>
          </div>
          <button class="btn btn-success" type="submit" disabled={loading}>
            <i class="bi bi-plus"></i> {loading ? 'Processing...' : (selectedUser ? 'Update User' : 'Add User')}
          </button>
        </div>

      </form>
      {loading ? <p>Loading users...</p> : (
        <table class="table">
          <thead>
            <tr>
              <th scope="col">First</th>
              <th scope="col">Middle</th>
              <th scope="col">Last</th>
              <th scope="col">Age</th>
              <th scope="col">Gender</th>
              <th scope="col">Course</th>
              <th scope="col">Action</th>
            </tr>
          </thead>
          <tbody>


            {users.map((user) => (
              <tr key={user._id}>
                <td>{user.firstName}</td>
                <td>{user.middleName}</td>
                <td>{user.lastName}</td>
                <td>{user.age}</td>
                <td>{user.gender}</td>
                <td>{user.course}</td>
                <td>
                  <button class="actionBtn editBtn btn btn-warning" onClick={() => handleEdit(user)}><i class="bi bi-pencil-square"></i>Edit</button>
                  <button class="actionBtn deleteBtn btn btn-danger" onClick={() => handleDelete(user._id)}><i class="bi bi-trash"></i>Delete</button>
                </td>
              </tr>
            ))}



          </tbody>
        </table>

      )}
    </div>
  );
};

export default UserForm;

-------------------------------------------


app css

.container{
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.actionBtn{
  margin: 10px;
}

.editBtn{
  border: none;
}

.txtH1{
  margin-top: 1em;
  margin-bottom: 2em;
}
input,select{
  margin: 1em;
}

.gender{

  display: flex;
  
}

.gen{
  margin-left: 1em;
}

.label1{
  margin-right: 1em;
}
.btn-success{
  margin-left: 1em;
}
.table{

  font-size: 1rem;
}


--------------------

index html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />a
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7" crossorigin="anonymous">
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>MERN CRUD</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js" integrity="sha384-k6d4wzSIapyDyv1kpU366/PK5hCdSbCRGRCMv+eplOQJWyd1fbcAu9OCUj5zNLiq" crossorigin="anonymous"></script>
  </body>
</html>
